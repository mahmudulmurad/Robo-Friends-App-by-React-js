{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/Errorboundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","Errorboundry","state","hasError","error","info","this","setState","Component","App","onsearchChange","event","target","value","fetch","then","response","json","users","filterrobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAbJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAEvB,OAEC,yBAAKC,UAAU,oDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACtB,6BACC,4BAAKF,GACL,2BAAIC,MCaOK,EApBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAIhB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OAAQ,kBAAC,EAAD,CACPC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACbF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCDRW,EAXG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC/B,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,gCACTY,KAAK,SAASC,YAAY,cAC1BC,SAAUH,MCEAI,EATA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAQ,kBAAkBC,OAAO,UAC/DJ,EAAMK,WCiBMC,G,wDAnBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAM,CACXC,UAAS,GAHQ,E,8DAMAC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACN,yCAEIG,KAAKX,MAAMK,a,GAfEQ,cC8CZC,E,kDAvCb,aAAe,IAAD,8BACZ,gBAYFC,eAAe,SAACC,GACd,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAZzC,EAAKX,MAAQ,CACTnB,OAAS,GACTM,YAAc,IAJN,E,gEAQM,IAAD,OACjByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAAExB,OAAOmC,S,+BAM5B,IAAD,EACsBZ,KAAKJ,MAAzBnB,EADF,EACEA,OAAOM,EADT,EACSA,YACR8B,EAAapC,EAAOqC,QAAO,SAAAC,GAC/B,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASlC,EAAYiC,kBAGxD,OAAQvC,EAAOyC,OAGd,yBAAK7C,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAYW,aAAcgB,KAAKI,iBAC/B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAQoC,OAPxB,2C,GAzBYX,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACR,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD4H1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.a3ce8542.chunk.js","sourcesContent":["import React from 'react'\r\nconst Card=({name,email,id})=>{\r\n\t//const {name,email,id}=props;\r\n\treturn(\r\n\r\n\t\t<div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-10'>\r\n\t\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst Cardlist=({robots})=>{\r\n\tif(false){\r\n\t\tthrow new Error('NOOOOPS');\r\n\t}\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user,i)=>{\r\n\t\t\t\treturn (<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id}\r\n\t\t\t\t \tname={robots[i].name} \r\n\t\t\t\t \temail={robots[i].email}\r\n\t\t\t\t \r\n\t\t\t\t />);\r\n\t\t\t})\r\n\r\n\t\t}\r\n\t\t</div>); \r\n}\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2' >\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-light-blue'\r\n\t\t\t\t type='search' placeholder='Search hera'\r\n\t\t\t\t onChange={searchChange}\r\n\t\t\t/>\t\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflow:'scroll',border :'3px solid black',height:'600px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\r\n\r\n\t);\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\nclass Errorboundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state={\r\n\t\thasError:false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Has error</h1>;\r\n\t\t}\r\n\t\telse return this.props.children\r\n\t\t\r\n\t\t\r\n\t}\r\n}\r\nexport default Errorboundry;","import React ,{Component} from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox'; \r\nimport Scroll from '../components/Scroll';\r\nimport '../containers/App.css';\r\nimport ErrorBoundry from '../components/Errorboundry';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n        robots : [],\r\n        searchfield : ''\r\n    }   \r\n   }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>response.json())\r\n    .then(users=>this.setState({ robots:users }));\r\n  }\r\n  onsearchChange=(event)=>{\r\n    this.setState({searchfield: event.target.value})\r\n  }\r\n\r\n  render() {\r\n      const {robots,searchfield}=this.state;\r\n      const filterrobots=robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n      })\r\n     \r\n     return !robots.length ?\r\n      <h1>LOADING</h1> :\r\n      (\r\n      <div className='tc'>\r\n        <h1 className='f2'>ROBO-FRIENDS</h1>\r\n        <SearchBox  searchChange={this.onsearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <Cardlist robots={filterrobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div> \r\n        );\r\n     }   \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nReactDOM.render(\r\n\t<App/>,document.getElementById('root')\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}